{"version":3,"sources":["../../../src/commands/Hats/hat.js"],"names":["https","require","request","defaults","encoding","fs","Canvas","Image","requirements","Alerts","constructor","args","aliases","module","nodes","description","usage","exec","command","msg","message","avatarURL","author","imgPromise","getImageFromUrl","hatPromise","getImageFromFile","img","hatImg","process","nextTick","canvas","ctx","getContext","drawImage","sendMessage","name","file","pngStream","init","console","log","path","Promise","resolve","reject","readFile","err","data","src","url","get","res","image","Buffer","from"],"mappings":";;;;;;;AAaA;;;;;;;;AAbA;;;;AAIA,IAAIA,QAAQ,IAAIC,OAAJ,CAAY,OAAZ,CAAZ;;AAEA,IAAIC,UAAUD,QAAQ,SAAR,EAAmBE,QAAnB,CAA4B,EAACC,UAAU,IAAX,EAA5B,CAAd;;AAEA,IAAIC,KAAKJ,QAAQ,IAAR,CAAT;;AAEA,IAAIK,SAASL,QAAQ,QAAR,CAAb;AAAA,IACIM,QAAQD,OAAOC,KADnB;;AAKA,IAAIC,eAAe,CAAC,UAAD,CAAnB;;AAEO,MAAMC,MAAN,2BAA6B;AAClCC,cAAY,GAAGC,IAAf,EAAqB;AACnB,UAAM,GAAGA,IAAT,EAAe;AACbC,eAAS,CAAC,KAAD,CADI;AAEbC,cAAQ,UAFK;AAGbC,aAAO,CAAC,gBAAD,CAHM;AAIbC,mBAAa,sCAJA;AAKbC,aAAO;AALM,KAAf;AAOD;;AAEKC,MAAN,CAAWC,OAAX,EAAoB;AAAA;AAClB,UAAIC,MAAMD,QAAQE,OAAlB;AACA,UAAIC,YAAYF,IAAIG,MAAJ,CAAWD,SAA3B;;AAEA,UAAIE,aAAaC,gBAAgBH,SAAhB,CAAjB;AACA,UAAII,aAAaC,iBAAiB,qBAAjB,CAAjB;;AAEA,UAAIC,MAAM,MAAMJ,UAAhB;AACA,UAAIK,SAAS,MAAMH,UAAnB;;AAEAI,cAAQC,QAAR,CAAiB,YAAM;AACrB,YAAIC,SAAS,IAAIzB,MAAJ,CAAW,GAAX,EAAgB,GAAhB,CAAb;AAAA,YAAmC0B,MAAMD,OAAOE,UAAP,CAAkB,IAAlB,CAAzC;AACAD,YAAIE,SAAJ,CAAcP,GAAd,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,GAAzB,EAA8B,GAA9B;AACAK,YAAIE,SAAJ,CAAcN,MAAd,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,GAA5B,EAAiC,GAAjC;AACAV,gBAAQiB,WAAR,CAAoB,mBAApB,EAAyC,EAACC,MAAM,SAAP,EAAkBC,MAAMN,OAAOO,SAAP,EAAxB,EAAzC;AACD,OALD;AAVkB;AAgBnB;;AAEDC,SAAO;AACLC,YAAQC,GAAR,CAAY,UAAZ;AACD;AA/BiC;;QAAvBhC,M,GAAAA,M;kBAkCEA,M;;;AAEf,SAASiB,gBAAT,CAA0BgB,IAA1B,EAAgC;AAC9B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCxC,OAAGyC,QAAH,CAAYJ,IAAZ,EAAkB,CAACK,GAAD,EAAMC,IAAN,KAAe;AAC/B,UAAID,GAAJ,EAAS,OAAOF,OAAOE,GAAP,CAAP;AACT,UAAIpB,MAAM,IAAIpB,KAAJ,EAAV;AACAoB,UAAIsB,GAAJ,GAAUD,IAAV;AACAJ,cAAQjB,GAAR;AACD,KALD;AAMD,GAPM,CAAP;AAQD;;AAED,SAASH,eAAT,CAAyB0B,GAAzB,EAA8B;AAC5B,SAAO,IAAIP,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AACpC3C,YAAQiD,GAAR,CAAYD,GAAZ,EAAiB,CAACH,GAAD,EAAMK,GAAN,EAAWC,KAAX,KAAoB;AACnC,UAAGN,GAAH,EAAQ,OAAOF,OAAOE,GAAP,CAAP;AACR,UAAIC,OAAOM,OAAOC,IAAP,CAAYF,KAAZ,CAAX;AACA,UAAI1B,MAAM,IAAIpB,KAAJ,EAAV;AACAoB,UAAIsB,GAAJ,GAAUD,IAAV;AACAJ,cAAQjB,GAAR;AACD,KAND;AAOD,GARM,CAAP;AASD","file":"hat.js","sourcesContent":["/**\n * Created by macdja38 on 2016-11-13.\n */\n\nvar https = new require('https');\n\nvar request = require('request').defaults({encoding: null});\n\nvar fs = require('fs');\n\nvar Canvas = require('canvas')\n  , Image = Canvas.Image;\n\nimport Command from \"../Command\";\n\nlet requirements = [\"Warframe\"];\n\nexport class Alerts extends Command {\n  constructor(...args) {\n    super(...args, {\n      aliases: ['hat'],\n      module: 'warframe',\n      nodes: ['warframe.alert'],\n      description: \"Display the current warframe alerts.\",\n      usage: []\n    });\n  }\n\n  async exec(command) {\n    let msg = command.message;\n    let avatarURL = msg.author.avatarURL;\n\n    let imgPromise = getImageFromUrl(avatarURL);\n    let hatPromise = getImageFromFile('./resources/hat.png');\n\n    let img = await imgPromise;\n    let hatImg = await hatPromise;\n\n    process.nextTick(() => {\n      let canvas = new Canvas(128, 128), ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, 128, 128);\n      ctx.drawImage(hatImg, 0, 0, 128, 128);\n      command.sendMessage(\"Here is your hat!\", {name: \"hat.png\", file: canvas.pngStream()});\n    })\n  }\n\n  init() {\n    console.log(\"Got init\");\n  }\n}\n\nexport default Alerts;\n\nfunction getImageFromFile(path) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (err, data) => {\n      if (err) return reject(err);\n      let img = new Image;\n      img.src = data;\n      resolve(img);\n    })\n  })\n}\n\nfunction getImageFromUrl(url) {\n  return new Promise((resolve, reject)=>{\n    request.get(url, (err, res, image)=> {\n      if(err) return reject(err);\n      let data = Buffer.from(image);\n      let img = new Image;\n      img.src = data;\n      resolve(img);\n    });\n  });\n}"]}