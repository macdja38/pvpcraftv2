{"version":3,"sources":["../../src/utils/configJSON.js"],"names":["fs","path","ConfigJSON","constructor","fileName","_fileName","_filePath","join","__dirname","_fileExamplePath","reload","rawFile","readFileSync","err","code","console","error","writeFileSync","Error","_data","JSON","parse","name","get","key","fallBack","failThrow","hasOwnProperty"],"mappings":";;;;;;AAGA;;AACA;;AAEA;;IAAYA,E;;AACZ;;IAAYC,I;;;;AAPZ;;;AASe,MAAMC,UAAN,CAAiB;AAC9B;;;;AAIAC,cAAY,EAACC,QAAD,EAAZ,EAAwB;AACtB,SAAKC,SAAL,GAAiBD,QAAjB;AACA,SAAKE,SAAL,GAAiBL,KAAKM,IAAL,CAAUC,SAAV,EAAsB,iBAAe,KAAKH,SAAU,QAApD,CAAjB;AACA,SAAKI,gBAAL,GAAwBR,KAAKM,IAAL,CAAUC,SAAV,EAAsB,yBAAuB,KAAKH,SAAU,gBAA5D,CAAxB;AACA,SAAKK,MAAL;AACD;;AAEDA,WAAS;AACP,QAAI;AACF,UAAIC,UAAUX,GAAGY,YAAH,CAAgB,KAAKN,SAArB,EAAgC,MAAhC,CAAd;AACD,KAFD,CAEE,OAAOO,GAAP,EAAY;AACZ,UAAIA,IAAIC,IAAJ,KAAa,QAAjB,EAA2B;AACzBC,gBAAQC,KAAR,CAAe,gBAAc,KAAKX,SAAU,mBAAgB,KAAKC,SAAU,2BAAwB,KAAKG,gBAAiB,kCAAzH;AACAT,WAAGiB,aAAH,CAAiB,KAAKX,SAAtB,EAAiCN,GAAGY,YAAH,CAAgB,KAAKH,gBAArB,EAAuC,MAAvC,CAAjC;AACAM,gBAAQC,KAAR,CAAe,gBAAc,KAAKX,SAAU,oBAAiB,KAAKC,SAAU,mCAA5E;AACA,cAAM,IAAIY,KAAJ,CAAW,YAAU,KAAKb,SAAU,QAApC,CAAN;AACD;AACF;;AAED,QAAI;AACF,WAAKc,KAAL,GAAaC,KAAKC,KAAL,CAAWV,OAAX,CAAb;AACD,KAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,YAAM,IAAIK,KAAJ,CAAW,oBAAkB,KAAKI,IAAK,QAAvC,CAAN;AACD;AACF;;AAED;;;;;;;AAOAC,MAAIC,GAAJ,EAAS,EAACC,QAAD,EAAWC,SAAX,EAAT,EAAgC;AAC9B,QAAI,KAAKP,KAAL,CAAWQ,cAAX,CAA0BH,GAA1B,CAAJ,EAAoC;AAClC,aAAO,KAAKL,KAAL,CAAWK,GAAX,CAAP;AACD,KAFD,MAEO,IAAIE,SAAJ,EAAe;AACpB,YAAM,IAAIR,KAAJ,CAAW,mBAAiBM,GAAI,wBAAqB,KAAKnB,SAAU,GAApE,CAAN;AACD;AACD,WAAOoB,QAAP;AACD;AA7C6B;kBAAXvB,U","file":"configJSON.js","sourcesContent":["/**\r\n * Created by macdja38 on 2016-09-18.\r\n */\r\nimport \"babel-core/register\";\r\nimport \"source-map-support/register\";\r\n\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\n\r\nexport default class ConfigJSON {\r\n  /**\r\n   * Instantiates a config object.\r\n   * @param fileName\r\n   */\r\n  constructor({fileName}) {\r\n    this._fileName = fileName;\r\n    this._filePath = path.join(__dirname, `../../config/${this._fileName}.json`);\r\n    this._fileExamplePath = path.join(__dirname, `../../config/example/${this._fileName}.example.json`);\r\n    this.reload();\r\n  }\r\n\r\n  reload() {\r\n    try {\r\n      var rawFile = fs.readFileSync(this._filePath, \"utf8\")\r\n    } catch (err) {\r\n      if (err.code === \"ENOENT\") {\r\n        console.error(`Config file ${this._fileName} not found in ${this._filePath} copying default from ${this._fileExamplePath} Please edit it to your liking.`);\r\n        fs.writeFileSync(this._filePath, fs.readFileSync(this._fileExamplePath, \"utf8\"));\r\n        console.error(`Config file ${this._fileName} was copied to ${this._filePath}, please edit it to your liking.`);\r\n        throw new Error(`Missing ${this._fileName}.json`)\r\n      }\r\n    }\r\n\r\n    try {\r\n      this._data = JSON.parse(rawFile);\r\n    } catch (err) {\r\n      throw new Error(`Invalid JSON in ${this.name}.json`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get a key from the config. will accept a fallBack value or throw if failThrow is defined.\r\n   * @param key\r\n   * @param fallBack\r\n   * @param failThrow\r\n   * @returns {*}\r\n   */\r\n  get(key, {fallBack, failThrow}) {\r\n    if (this._data.hasOwnProperty(key)) {\r\n      return this._data[key];\r\n    } else if (failThrow) {\r\n      throw new Error(`Error Property ${key} does not exist on ${this._fileName}`);\r\n    }\r\n    return fallBack;\r\n  }\r\n}"]}