{"version":3,"sources":["../../src/utils/videoInfo.js"],"names":["getVideoInfo","fetchWithYtdl","fetchWithYoutubeDl","getStreamUrl","youtubeDl","require","ytdl","idealFormatIds","link","indexOf","catch","Promise","resolve","reject","getInfo","err","info","maxBuffer","getEncoding","encoding","audioEncoding","acodec","getContainer","ext","container","getFormatId","itag","format_id","isEncodedAs","isContainer","streamableSource","formats","sourceURL","webpage_url","loaderUrl","formatMap","map","f","console","log","format","url","opusItems","filter","webMOpusItems","length","sortedwebMOpusItems","sort","a","b","abr","audioBitrate","raven","process","nextTick","toObj","chosen","find","resolution","captureException","extra","level","arr","reduce","o","v","i"],"mappings":"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","file":"videoInfo.js","sourcesContent":["/**\n * Created by macdja38 on 2016-11-27.\n */\n\n/**\n * Created by meew0 on 2015-011-27.\n */\n\"use strict\";\n\nlet youtubeDl = require('youtube-dl');\nlet ytdl = require('ytdl-core');\n\n// formats in order of preference when streaming them\n// starting numbers are itag values for youtube https://en.wikipedia.org/wiki/YouTube#Quality_and_formats\nlet idealFormatIds = [\"127\", \"128\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"249\", \"250\", \"251\", \"171\", \"140\", \"141\", \"82\", \"83\", \"100\", \"84\", \"85\", \"5\", \"18\", \"43\", \"22\", \"36\", \"17\", \"http_mp3_128_url\"];\n\nexport function getVideoInfo(link) {\n  if (link.indexOf(\"youtu\") > -1) {\n    return fetchWithYtdl(link).catch(() => fetchWithYoutubeDl(link));\n  } else {\n    return fetchWithYoutubeDl(link);\n  }\n}\n\nexport function fetchWithYtdl(link) {\n  return new Promise((resolve, reject)=> {\n    ytdl.getInfo(link, [], (err, info) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(info);\n      }\n    })\n  });\n}\n\nexport function fetchWithYoutubeDl(link) {\n  return new Promise((resolve, reject)=> {\n    youtubeDl.getInfo(link, [], {maxBuffer: 1000 * 1024}, (err, info) => {\n      if (err) {\n        reject(err);\n      }\n      else {\n        resolve(info);\n      }\n    });\n  })\n}\n\nfunction getEncoding(info) {\n  return info.encoding || info.audioEncoding || info.acodec;\n}\n\nfunction getContainer(info) {\n  return info.ext || info.container;\n}\n\nfunction getFormatId(info) {\n  return info.itag || info.format_id;\n}\n\nfunction isEncodedAs(info, encoding) {\n  return getEncoding(info) === encoding;\n}\n\nfunction isContainer(info, container) {\n  return getContainer(info) === container;\n}\n\nexport function getStreamUrl(info) {\n  // first round, extract anything with opus and feed that through.\n  let streamableSource = {};\n  let formats = info.formats;\n  streamableSource.sourceURL = info.webpage_url || info.loaderUrl;\n  // try and just use itag values\n  let formatMap = formats.map(f => getFormatId(f));\n  for (let itag of idealFormatIds) {\n    if (formatMap.indexOf(itag) > -1) {\n      console.log(\"found based on itag\");\n      let format = formats[formatMap.indexOf(itag)];\n      streamableSource.encoding = getEncoding(format);\n      streamableSource.container = getContainer(format);\n      streamableSource.url = format.url;\n      return streamableSource;\n    }\n  }\n\n  let opusItems = info.formats\n    .filter(f => isEncodedAs(f, \"opus\"));\n  let webMOpusItems = opusItems.filter(f => isContainer(f, \"webm\"));\n  if (webMOpusItems.length > 0) {\n    streamableSource.encoding = \"opus\";\n    streamableSource.container = \"webm\";\n    let sortedwebMOpusItems = webMOpusItems.sort((a, b) => (b.abr || b.audioBitrate) - (a.abr || a.audioBitrate));\n    streamableSource.url = sortedwebMOpusItems[0].url;\n    console.log(\"Found webm/opus\");\n    if (this.raven) {\n      process.nextTick(() => {\n        let formats = toObj(info.formats);\n        formats.chosen = streamableSource;\n      });\n    }\n    return streamableSource;\n  }\n\n  // let oggItems = opusItems.filter(f => isContainer(f, \"ogg\"));\n\n  // second round, capture anything with a bitrate and no resolution\n  formats = info.formats\n    .sort((a, b) => b.abr - a.abr);\n  if (formats.length > 0) {\n    let format = (formats.find(f => (f.abr || f.audioBitrate) > 0 && !f.resolution) || formats.find(f => (f.abr || f.audioBitrate) > 0));\n    if (format) {\n      streamableSource.url = format.url;\n      streamableSource.container = getContainer(format);\n      streamableSource.encoding = getEncoding(format);\n      console.log(\"defaulted to other \", streamableSource.container, streamableSource.encoding);\n      if (this.raven) {\n        process.nextTick(() => {\n          let formats = toObj(info.formats);\n          formats.chosen = streamableSource;\n        });\n      }\n      return streamableSource;\n    }\n\n\n    // 3rd round, extract mp3's and return those.\n    format = formats.find(f => isContainer(f, \"mp3\"));\n    if (format) {\n      streamableSource.url = format.url;\n      streamableSource.container = getContainer(format);\n      streamableSource.encoding = getEncoding(format);\n      console.log(\"defaulted to other \", streamableSource.container, streamableSource.encoding);\n      if (this.raven) {\n        process.nextTick(() => {\n          let formats = toObj(info.formats);\n          formats.chosen = streamableSource;\n        });\n      }\n      return streamableSource;\n    }\n  }\n  if (this.raven) {\n    this.raven.captureException(\"Could not find a format to queue\", {\n      extra: toObj(info.formats),\n      level: \"error\"\n    });\n  }\n  return null;\n}\n\nfunction toObj(arr) {\n  return arr.reduce(function (o, v, i) {\n    o[i] = v;\n    return o;\n  }, {});\n}\n\nexport default {\n  getVideoInfo,\n  getStreamUrl\n};"]}