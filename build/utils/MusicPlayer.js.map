{"version":3,"sources":["../../src/utils/MusicPlayer.js"],"names":["MusicPlayer","constructor","adapter","guild","text","voice","queue","currentSong","musicDB","music","_adapter","_musicDB","repeat","fallbackQueue","ready","connecting","songStartTime","Date","now","length","push","init","then","play","saveQueue","id","guild_name","name","text_id","voice_id","saveCurrentSong","addListeners","connection","oldConnection","removeListeners","on","onEnd","bind","onError","onWarn","onDebug","onDisconnect","removeListener","queueRandomPlaylist","playlist","getCachedDiscordFMPlaylist","newSong","Math","floor","random","link","url","user","args","console","error","lastVideo","shift","debug","test","disconnect","_init","channel","joinVoiceChannel","initReady","add","user_id","user_name","log","getStreamUrl","getCachingInfoLink","startTime","result","encoderArgs","pause"],"mappings":"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","file":"MusicPlayer.js","sourcesContent":["/**\n * Created by macdja38 on 2016-11-26.\n */\n\"use strict\";\nimport \"babel-core/register\";\nimport \"source-map-support/register\";\n\nexport class MusicPlayer {\n  constructor(adapter, guild, text, voice, queue, currentSong, musicDB, music) {\n    this._adapter = adapter;\n    this._musicDB = musicDB;\n    this.music = music;\n    this.guild = guild;\n    this.text = text;\n    this.voice = voice;\n    this.queue = queue;\n    this.repeat = false;\n    this.fallbackQueue = \"electro-hub\";\n    this.ready = false;\n    this.connecting = false;\n    this.currentSong = currentSong;\n    this.songStartTime = Date.now();\n    if (queue && (queue.length > 0 || currentSong )) {\n      if (currentSong) this.queue.push(currentSong);\n      this.init(voice).then(() => {\n        this.play();\n      })\n    }\n  }\n\n  saveQueue() {\n    this._musicDB.saveQueue({\n      id: this.guild.id,\n      guild_name: this.guild.name,\n      text: this.text.name,\n      text_id: this.text.id,\n      voice: this.voice.name,\n      voice_id: this.voice.id,\n    }, this.queue)\n  }\n\n  saveCurrentSong() {\n    this._musicDB.saveCurrentSong({\n      id: this.guild.id,\n      guild_name: this.guild.name,\n      text: this.text.name,\n      text_id: this.text.id,\n      voice: this.voice.name,\n      voice_id: this.voice.id,\n    }, this.currentSong);\n  }\n\n  addListeners(connection, oldConnection) {\n    if (oldConnection) {\n      this.removeListeners(oldConnection);\n    }\n    connection.on(\"end\", this.onEnd.bind(this));\n    connection.on(\"error\", this.onError.bind(this));\n    connection.on(\"warn\", this.onWarn.bind(this));\n    connection.on(\"debug\", this.onDebug.bind(this));\n    connection.on(\"disconnect\", this.onDisconnect.bind(this));\n  }\n\n  removeListeners(oldConnection) {\n    oldConnection.removeListener(\"end\", this.onEnd);\n    oldConnection.removeListener(\"error\", this.onError);\n    oldConnection.removeListener(\"warn\", this.onWarn);\n    oldConnection.removeListener(\"debug\", this.onDebug);\n    oldConnection.removeListener(\"disconnect\", this.onDisconnect);\n  }\n\n  async queueRandomPlaylist(id) {\n    let playlist = await this.music.getCachedDiscordFMPlaylist(id);\n    let newSong = playlist.playlist[Math.floor(Math.random() * playlist.playlist.length)];\n    this.queue.push({link: newSong.url, user: \"103607047383166976\"});\n  }\n\n  async onEnd(...args) {\n    console.error(\"End\", ...args);\n    let lastVideo = this.queue.shift();\n    if (this.repeat) this.queue.push(lastVideo);\n    else if (this.fallbackQueue && this.queue.length < 1) {\n      await this.queueRandomPlaylist(this.fallbackQueue);\n    }\n    if (this.queue.length > 0) {\n      this.play();\n    }\n    this.saveQueue();\n  }\n\n  onWarn(...args) {\n    console.error(\"Warn\", ...args);\n  }\n\n  onDebug(debug) {\n    if (!/\"op\":(?:3|5)/.test(debug)) {\n      console.error(\"Debug\", debug);\n    }\n  }\n\n  onError(...args) {\n    console.error(\"Error\", ...args);\n  }\n\n  onDisconnect(...args) {\n    console.error(\"Disconnected\", ...args);\n    this.connection.disconnect(null, true);\n    this.init(this.voice);\n  }\n\n  _init(channel) {\n    return this._adapter.joinVoiceChannel(channel.id).then(connection => {\n      let oldConnection = this.connection;\n      if (oldConnection) {\n        this.removeListeners(oldConnection);\n      }\n      this.connection = connection;\n      this.addListeners(connection, oldConnection);\n    });\n  }\n\n  async init(channel) {\n    let initReady = this._init(channel);\n    this.ready = initReady;\n    await this.ready;\n    this.ready = true;\n    return initReady;\n  }\n\n  add(link, user) {\n    this.queue.push({link, user_id: user.id, user_name: user.name});\n    this.saveQueue();\n  }\n\n  async play() {\n    if (this.ready === false) this.init(this.voice);\n    try {\n      if (this.ready.then) await this.ready;\n    } catch (error) {\n      return;\n    }\n    if (this.queue.length > 0) {\n      console.log(\"queue\", this.queue);\n      let url;\n      try {\n        url = this.music.getStreamUrl(await this.music.getCachingInfoLink(this.queue[0].link));\n      } catch (error) {\n        this.onEnd();\n        return;\n      }\n      this.currentSong = {link: this.queue[0], user_id: this.queue[0].user_id, startTime: Date.now()};\n      this.saveCurrentSong();\n      console.log(\"Attempting to play \", url);\n      console.log(\"Current connection status Ready:\", this.connection.ready, \" connecting:\", this.connection.connecting);\n      let result = await this.connection.play(url.url, {encoderArgs: [\"-c\", \"copy\"]});\n      console.log(\"Play result \", result);\n    }\n  }\n\n  pause() {\n\n  }\n}\n\nexport default MusicPlayer;\n"]}