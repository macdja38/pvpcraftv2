{"version":3,"sources":["../../src/modules/Music.js"],"names":["requirements","request","require","table","Music","constructor","configDB","authJSON","musicDB","MusicPlayer","adaptersArray","adapters","players","regionCode","apiKey","get","startConnections","forEach","a","ready","getAll","serverIds","then","queues","console","log","queue","guild","getGuild","id","voice","getChannel","voice_id","text","text_id","player","cachingSearch","push","string","cache","getSearch","response","search","saveSearch","catch","error","Promise","resolve","reject","requestUrl","method","uri","gzip","JSON","parse","body"],"mappings":"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","file":"Music.js","sourcesContent":["/**\r\n * Created by macdja38 on 2016-11-26.\r\n */\r\n\"use strict\";\r\nimport \"babel-core/register\";\r\nimport \"source-map-support/register\";\r\n\r\nimport Module from \"./Module\";\r\n\r\nlet requirements = [\"configDB\", \"musicDB\", \"configJSON\", \"musicPlayer\"];\r\n\r\nlet request = require(\"request\");\r\n\r\nlet table = \"music\";\r\n\r\nexport class Music extends Module {\r\n  constructor({ configDB, authJSON, musicDB, MusicPlayer, adaptersArray }) {\r\n    super();\r\n    this.adapters = adaptersArray;\r\n    this.MusicPlayer = MusicPlayer;\r\n    this.musicDB = musicDB;\r\n    this.players = [];\r\n    this.regionCode = \"CA\";\r\n    this.apiKey = authJSON.get(\"apiKeys.youtube\", false);\r\n    this.startConnections();\r\n  }\r\n\r\n  startConnections() {\r\n    this.adapters.forEach(async a => {\r\n      await a.ready;\r\n      this.musicDB.getAll(...a.serverIds).then(queues => {\r\n        queues.forEach(queue => {\r\n          console.log(queue);\r\n          let guild = a.getGuild(queue.id);\r\n          if (!guild) return;\r\n          let voice = guild.getChannel(queue.voice_id);\r\n          let text = guild.getChannel(queue.text_id);\r\n          if (!text || !voice) return;\r\n          let player = new this.MusicPlayer(a, guild, text, voice, queue.queue, this.musicDB, this);\r\n          // player.init(voice.id);\r\n          this.cachingSearch(\"rock and roll\");\r\n          this.players.push(player);\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  async cachingSearch(string) {\r\n    let cache = await this.musicDB.getSearch(string);\r\n    if (cache) {\r\n      console.log(\"Cached\", cache);\r\n      return cache;\r\n    }\r\n    let response = await this.search(string);\r\n    this.musicDB.saveSearch(string, response).catch(error => console.error);\r\n    console.log(response);\r\n  }\r\n\r\n  search(string) {\r\n    return new Promise((resolve, reject) => {\r\n      let requestUrl = \"https://www.googleapis.com/youtube/v3/search\" +\r\n        `?part=snippet&q=${string}&key=${this.apiKey}&regionCode=${this.regionCode}`;\r\n      request({method: \"GET\", uri: requestUrl, gzip: true}, (error, response) => {\r\n        if (error) reject(error);\r\n        resolve(JSON.parse(response.body));\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport default Music;"]}