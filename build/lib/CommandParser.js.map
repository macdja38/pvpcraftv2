{"version":3,"sources":["../../src/lib/CommandParser.js"],"names":["regArgs","regFlagsAndOptions","getPrefix","content","prefixes","id","m","trim","i","indexOf","toLowerCase","substr","length","prefix","mentionRegex","RegExp","test","replace","dissectMessage","args","exec","split","splice","command","shift","flags","options","myArray","concat","parse","message","channel","user","author","prefixResult","info"],"mappings":"AAAA;;;AAGA;;;;;;;AAEA;;;;AACA;;;;AAEA,MAAMA,UAAU,uBAAhB;AACA,MAAMC,qBAAqB,mEAA3B;;AAEO,MAAMC,gCAAY,UAAUC,OAAV,EAAmBC,QAAnB,EAA6BC,EAA7B,EAAiC;AACxD,MAAIC,IAAIH,QAAQI,IAAR,EAAR;AACA,OAAK,IAAIC,CAAT,IAAcJ,QAAd,EAAwB;AACtB,QAAIE,EAAEG,OAAF,CAAUL,SAASI,CAAT,EAAYE,WAAZ,EAAV,MAAyC,CAA7C,EAAgD;AAC9CJ,UAAIA,EAAEK,MAAF,CAASP,SAASI,CAAT,EAAYI,MAArB,CAAJ;AACA,aAAO,EAAEC,QAAQ,kBAAMT,SAASI,CAAT,CAAN,CAAV,EAA8BL,SAASG,CAAvC,EAAP;AACD;AACF;AACD;AACA,MAAIQ,eAAe,IAAIC,MAAJ,CAAY,SAAOV,EAAG,IAAtB,CAAnB;AACA,MAAIS,aAAaE,IAAb,CAAkBV,CAAlB,CAAJ,EAA0B;AACxBA,QAAIA,EAAEW,OAAF,CAAUH,YAAV,EAAwB,EAAxB,CAAJ;AACA,WAAO,EAAED,QAAS,MAAIR,EAAG,IAAlB,EAAsBF,SAASG,CAA/B,EAAP;AACD;AACD,SAAO,KAAP;AACD,CAfM;;AAiBA,MAAMY,0CAAiB,UAAUf,OAAV,EAAmB;AAC/C,MAAIgB,OAAOnB,QAAQoB,IAAR,CAAajB,OAAb,EAAsB,CAAtB,EAAyBI,IAAzB,GAAgCc,KAAhC,CAAsC,GAAtC,CAAX;AACA,OAAK,IAAIb,CAAT,IAAcW,IAAd,EAAoB;AAClB,QAAIA,KAAKX,CAAL,MAAY,EAAhB,EAAoB;AAClBW,WAAKG,MAAL,CAAYd,CAAZ,EAAe,CAAf;AACD;AACF;AACD,MAAIe,UAAUJ,KAAKK,KAAL,EAAd;AACA,MAAIC,QAAQ,EAAZ;AACA,MAAIC,UAAU,EAAd;AACA,MAAIC,OAAJ;AACA,SAAO,CAACA,UAAU1B,mBAAmBmB,IAAnB,CAAwBjB,OAAxB,CAAX,MAAiD,IAAxD,EAA8D;AAC5D,QAAIwB,QAAQ,CAAR,KAAcA,QAAQ,CAAR,CAAlB,EAA8B;AAC5BD,cAAQC,QAAQ,CAAR,CAAR,IAAsBA,QAAQ,CAAR,CAAtB;AACD;AACD,QAAIA,QAAQ,CAAR,CAAJ,EAAgB;AACdF,cAAQA,MAAMG,MAAN,CAAaD,QAAQ,CAAR,EAAWN,KAAX,CAAiB,EAAjB,CAAb,CAAR;AACD;AACF;AACD,SAAO,EAAEE,OAAF,EAAWJ,IAAX,EAAiBO,OAAjB,EAA0BD,KAA1B,EAAP;AACD,CApBM;;AAsBA,MAAMI,wBAAQ,UAAU,EAACC,OAAD,EAAUC,OAAV,EAAmB3B,QAAnB,EAA6BC,EAA7B,EAAV,EAA4C;AAC/D,MAAIqB,UAAU,EAAd;AACAA,UAAQvB,OAAR,GAAkB2B,QAAQ3B,OAA1B;AACAuB,UAAQK,OAAR,GAAkBA,OAAlB;AACAL,UAAQI,OAAR,GAAkBA,OAAlB;AACAJ,UAAQM,IAAR,GAAeF,QAAQG,MAAvB;AACA,MAAIC,eAAehC,UAAUwB,QAAQvB,OAAlB,EAA2BC,QAA3B,EAAqCC,EAArC,CAAnB;AACA,MAAI6B,YAAJ,EAAkB;AAChBR,YAAQvB,OAAR,GAAkB+B,aAAa/B,OAA/B;AACAuB,YAAQb,MAAR,GAAiBqB,aAAarB,MAA9B;AACA,QAAIsB,OAAOjB,eAAeQ,QAAQvB,OAAvB,CAAX;AACA,QAAIgC,IAAJ,EAAU;AACRT,cAAQH,OAAR,GAAkBY,KAAKZ,OAAvB;AACAG,cAAQP,IAAR,GAAegB,KAAKhB,IAApB;AACAO,cAAQA,OAAR,GAAkBS,KAAKhB,IAAvB;AACAO,cAAQD,KAAR,GAAgBU,KAAKV,KAArB;AACD;AACF;AACD,SAAO,0BAAYC,OAAZ,CAAP;AACD,CAnBM;;kBAqBQG,K","file":"CommandParser.js","sourcesContent":["/**\r\n * Created by macdja38 on 2016-08-08.\r\n */\r\n\"use strict\";\r\n\r\nimport Command from \"../Types/userCommand\";\r\nimport { clean } from \"../utils/utils.js\"\r\n\r\nconst regArgs = /^((?:.|\\n)*?)(?= -|$)/;\r\nconst regFlagsAndOptions = /(?:(?:\\s--)(\\w+).(\\n|.*?)(?= -|\\n|$)|(?:\\s-)([^-]*?)(?= -|\\n|$))/g;\r\n\r\nexport const getPrefix = function (content, prefixes, id) {\r\n  var m = content.trim();\r\n  for (let i in prefixes) {\r\n    if (m.indexOf(prefixes[i].toLowerCase()) === 0) {\r\n      m = m.substr(prefixes[i].length);\r\n      return { prefix: clean(prefixes[i]), content: m };\r\n    }\r\n  }\r\n  // see if the user is mentioned\r\n  let mentionRegex = new RegExp(`^<@!?${id}>`);\r\n  if (mentionRegex.test(m)) {\r\n    m = m.replace(mentionRegex, \"\");\r\n    return { prefix: `<@${id}>`, content: m };\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const dissectMessage = function (content) {\r\n  let args = regArgs.exec(content)[1].trim().split(\" \");\r\n  for (let i of args) {\r\n    if (args[i] === \"\") {\r\n      args.splice(i, 1);\r\n    }\r\n  }\r\n  let command = args.shift();\r\n  let flags = [];\r\n  let options = [];\r\n  var myArray;\r\n  while ((myArray = regFlagsAndOptions.exec(content)) !== null) {\r\n    if (myArray[1] && myArray[2]) {\r\n      options[myArray[1]] = myArray[2];\r\n    }\r\n    if (myArray[3]) {\r\n      flags = flags.concat(myArray[3].split(\"\"));\r\n    }\r\n  }\r\n  return { command, args, options, flags }\r\n};\r\n\r\nexport const parse = function ({message, channel, prefixes, id}) {\r\n  let options = {};\r\n  options.content = message.content;\r\n  options.channel = channel;\r\n  options.message = message;\r\n  options.user = message.author;\r\n  let prefixResult = getPrefix(options.content, prefixes, id);\r\n  if (prefixResult) {\r\n    options.content = prefixResult.content;\r\n    options.prefix = prefixResult.prefix;\r\n    let info = dissectMessage(options.content);\r\n    if (info) {\r\n      options.command = info.command;\r\n      options.args = info.args;\r\n      options.options = info.args;\r\n      options.flags = info.flags;\r\n    }\r\n  }\r\n  return new Command(options);\r\n};\r\n\r\nexport default parse;"]}