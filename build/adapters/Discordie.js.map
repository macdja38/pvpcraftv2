{"version":3,"sources":["../../src/adapters/Discordie.js"],"names":["DiscordieAdapter","constructor","configJSON","adapterSettings","_configJSON","_adapterSettings","_client","_ready","startReady","adapter","Promise","resolve","reject","Dispatcher","on","ready","name","serverIds","Guilds","map","g","id","login","connect","token","auth","reconnect","startEvents","console","log","User","username","e","_commandHandler","onMessage","DiscordieMessage","message","author","content","data","getChanges","before","after","getGuild","guild","get","DiscordieGuild","joinVoiceChannel","channelId","channel","Channels","join","then","c","DiscordieConnection","client","_message","clientUser","DiscordieUser","getChannel","_guild","channels","find","connectionInfo","voiceConnection","play","container","encoding","url","encoder","fsStream","sourceStreamPromise","rs","sourceStream","makeStream","_connection","createExternalEncoder","type","source","format","frameDuration","debug","encoderStream","emit","once","s","unpipe","unpipeAll","PassThrough","res","error","pipe"],"mappings":"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","file":"Discordie.js","sourcesContent":["/**\n * Created by macdja38 on 2016-09-18.\n */\n\n\"use strict\";\nimport \"babel-core/register\";\nimport \"source-map-support/register\";\n\nimport stream from \"stream\";\nimport https from \"https\";\nimport Discordie from \"discordie\";\nimport Adapter from \"./Adapter\";\nimport Message from \"../events/Message\";\nimport Guild from \"../events/Guild\";\nimport User from \"../events/User\";\nimport Connection from \"../events/Connection\";\n\nexport default class DiscordieAdapter extends Adapter {\n  constructor({configJSON, adapterSettings}) {\n    super();\n    //noinspection JSUnresolvedVariable\n    this._configJSON = configJSON;\n    this._adapterSettings = adapterSettings;\n    this._client = new Discordie();\n    this._ready = this.startReady();\n  }\n\n  get adapter() {\n    return \"discordie\"\n  }\n\n  startReady() {\n    return new Promise((resolve, reject) => {\n      this._client.Dispatcher.on(\"GATEWAY_READY\", ()=>{\n        resolve(true);\n      })\n    })\n  }\n\n  get ready() {\n    return this._ready;\n  }\n\n  static get name() {\n    return \"discordie\";\n  }\n\n  get serverIds() {\n    return this._client.Guilds.map(g => g.id);\n  }\n\n  async login() {\n    await this._client.connect({\n      token: this._adapterSettings.auth.token,\n      reconnect: true\n    });\n    this.startEvents();\n  }\n\n  startEvents() {\n    this._client.Dispatcher.on(\"GATEWAY_READY\", () => {\n      /* eslint-disable */\n      console.log(`Connected as: ${this._client.User.username}`);\n      /* eslint-enable */\n    });\n\n    this._client.Dispatcher.on(\"MESSAGE_CREATE\", e => {\n      this._commandHandler.onMessage(new DiscordieMessage(e, this._client));\n      console.log(`discordie ${this._client.User.username} ${e.message.author.username} ${e.message.content}`);\n    });\n\n    this._client.Dispatcher.on(\"GUILD_ROLE_UPDATE\", e => {\n      console.log(e); //eslint-disable-line no-console\n      const data = e.getChanges();\n      console.log(data.before); //eslint-disable-line no-console\n      console.log(data.after); //eslint-disable-line no-console\n    });\n  }\n\n  getGuild(id) {\n    let guild = this._client.Guilds.get(id);\n    if (guild) {\n      return new DiscordieGuild(guild);\n    } else {\n      return null;\n    }\n  }\n\n  joinVoiceChannel(channelId) {\n    let channel = this._client.Channels.get(channelId);\n    if (channel) {\n      return channel.join().then(c => new DiscordieConnection(c));\n    }\n    return Promise.reject(\"Channel not found\");\n  }\n}\n\nclass DiscordieMessage extends Message {\n  constructor(message, client) {\n    super(message.message, client);\n  }\n\n  get adapter() {\n    return \"discordie\"\n  }\n\n  get guild() {\n    return new DiscordieGuild(this._message.guild);\n  }\n\n  get clientUser() {\n    return this.client.User;\n  }\n\n  get content() {\n    return this._message.content;\n  }\n\n  get author() {\n    return new DiscordieUser(this._message.author);\n  }\n}\n\nclass DiscordieGuild extends Guild {\n  constructor(guild) {\n    super(guild);\n  }\n\n  getChannel(id) {\n    return this._guild.channels.find(c => c.id === id);\n  }\n}\n\nclass DiscordieUser extends User {\n  constructor(guild) {\n    super(guild);\n  }\n}\n\nclass DiscordieConnection extends Connection {\n  constructor(connectionInfo) {\n    super(connectionInfo.voiceConnection);\n  }\n\n  play(data) {\n    data = { container: \"god knows\", encoding: \"even worse\", url: data };\n    console.log(\"Discordie Music Playing Code here.\", data);\n    let encoder;\n    let fsStream = false;\n    let sourceStreamPromise = false;\n    if (data.container === \"webm\" && data.encoding === \"opus\") {\n      let {rs, sourceStream} = makeStream(data.url);\n      fsStream = rs;\n      sourceStreamPromise = sourceStream;\n      encoder = this._connection.createExternalEncoder({\n        type: \"WebmOpusPlayer\",\n        source: fsStream,\n      });\n    } else {\n      console.log(this._connection);\n      encoder = this._connection.createExternalEncoder({\n        type: \"ffmpeg\",\n        format: \"opus\",\n        source: data.url,\n        frameDuration: 60,\n        debug: true,\n      });\n    }\n\n    let encoderStream = encoder.play();\n    encoder.on(\"end\", () => this.emit(\"end\"));\n\n    encoderStream.once('unpipe', ()=>{\n      if (sourceStreamPromise) {\n        sourceStreamPromise.then(s => s.unpipe());\n        encoder.unpipeAll();\n      }\n    });\n  }\n}\n\nfunction makeStream(url) {\n  let rs = new stream.PassThrough();\n  let sourceStreamPromise = new Promise((resolve, reject) => {\n    https.get(url, function (res) {\n      res.on(\"error\", error => {reject(error); console.error(error)});\n      resolve(res);\n      res.pipe(rs)\n    });\n  });\n  return { rs, sourceStreamPromise };\n}"]}